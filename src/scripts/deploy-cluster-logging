#!/bin/bash

# Optional fields
# script name: deploy-cluster-logging
# script description: Deploy cluster logging 

# Mandatory function
# start main - do not remove this line and do not change the function name
main() {
  # Default values
  op_es_channel=$(oc  -n openshift-life-cycle-operator get packagemanifest elasticsearch-operator -o jsonpath='{.status.defaultChannel}' )
  op_cl_channel=$(oc  -n openshift-life-cycle-operator get packagemanifest cluster-logging -o jsonpath='{.status.defaultChannel}' )
  es_pods=1
  es_redundancy="ZeroRedundancy"
  es_memory="2Gi"
  es_cpu="200m"
  kibana_pods=1
  kibana_memory="512Mi"
  kibana_cpu="500m"
  curator_memory="200Mi"
  curator_cpu="200m"
  # parse arguments from ${1}, if any, and export them as variables
  parse_args_as_variables "${1}"

  # Create the namespace for Elasticsearh operator
  cat << EOF | oc apply -f - \
                && success "Namespace \"openshift-operators-redhat\" created successfully." \
                || die "Error creating \"openshift-operators-redhat\" namespace."
apiVersion: v1
kind: Namespace
metadata:
  name: openshift-operators-redhat
  annotations:
    openshift.io/node-selector: ""
  labels:
    openshift.io/cluster-monitoring: "true"
EOF

  # Create the namespace for cluster logging operator
  cat << EOF | oc apply -f - \
                && success "Namespace \"openshift-logging\" created successfully." \
                || die "Error creating \"openshift-logging\" namespace."
apiVersion: v1
kind: Namespace
metadata:
  name: openshift-logging
  annotations:
    openshift.io/node-selector: ""
  labels:
    openshift.io/cluster-monitoring: "true"
EOF

  # Create operator group for Elasticsearch operator
  cat << EOF | oc apply -f - \
                && success "Operator group for Elasticsearch Operator created successfully." \
                || die "Error creating the Operator group for Elasticsearch Operator."
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: openshift-operators-redhat
  namespace: openshift-operators-redhat
spec: {}
EOF

  # Create a subscription for Elasticsearch operator
  cat << EOF | oc apply -f - \
                && success "Subscription for Elasticsearch Operator created successfully."  \
                || die "Error creating the subscription for Elasticsearch Operator."
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: "elasticsearch-operator"
  namespace: "openshift-operators-redhat"
spec:
  channel: "${op_es_channel}"
  installPlanApproval: "Automatic"
  source: "redhat-operators"
  sourceNamespace: "openshift-marketplace"
  name: "elasticsearch-operator"
EOF

  # Create operator group for Cluster Logging operator
  cat << EOF | oc apply -f - \
                && success "Operator group for Cluster Logging Operator created successfully." \
                || die "Error creating the Operator group for Cluster Logging Operator."
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: cluster-logging
  namespace: openshift-logging
spec: {}
EOF

  # Create a subscription for Cluster Logging operator
  cat << EOF | oc apply -f - \
                && success "Subscription for Cluster Logging Operator created successfully."  \
                || die "Error creating the subscription for Cluster Logging Operator."
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: "cluster-logging"
  namespace: "openshift-logging"
spec:
  channel: "${op_cl_channel}"
  source: "redhat-operators"
  sourceNamespace: "openshift-marketplace"
  name: "cluster-logging"
EOF

  verbose "Pausing fo 5 seconds..."
  sleep 5

  # Create Cluster Logging instance
  cat << EOF | oc apply -f - \
              && success "Cluster Logging instance created successfully." \
              || die "Error creating Cluster Logging instance."
apiVersion: "logging.openshift.io/v1"
kind: "ClusterLogging"
metadata:
  name: "instance"
  namespace: "openshift-logging"
spec:
  managementState: "Managed"
  logStore:
    type: "elasticsearch"
    elasticsearch:
      nodeCount: ${es_pods}
      resources:
        limits:
          memory: ${es_memory}
        requests:
          cpu: ${es_cpu}
          memory: ${es_memory}
      storage: {}
      redundancyPolicy: ${es_redundancy}
  visualization:
    type: "kibana"
    kibana:
      resources:
        limits:
          memory: ${kibana_memory}
        requests:
          cpu: ${kibana_cpu}
          memory: ${kibana_memory}
      replicas: ${kibana_pods}
  curation:
    type: "curator"
    curator:
      resources:
        limits:
          memory: ${curator_memory}
        requests:
          cpu: ${curator_cpu}
          memory: ${curator_memory}
      schedule: "*/5 * * * *"
  collection:
    type: "vector"
EOF
}
# end main - do not remove this line

# Optionally, keep this if you want to run your script manually or for testing.
main $@
